
import React, { useState } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { format } from "date-fns";
import { ru } from "date-fns/locale";
import { Package, Phone, MapPin, Calendar, User, Clock, Sparkles, Truck, CheckCircle, XCircle, ShoppingBag, Star, List, Store } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import { motion } from "framer-motion";

export default function OrdersManagement() {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [statusFilter, setStatusFilter] = useState("–≤—Å–µ"); // Changed initial state from "–Ω–æ–≤—ã–π" to "–≤—Å–µ"

  const { data: orders, isLoading } = useQuery({
    queryKey: ['admin-orders'],
    queryFn: () => base44.entities.Order.list('-created_date'),
    initialData: [],
  });

  const { data: bouquets, isLoading: loadingBouquets } = useQuery({
    queryKey: ['admin-bouquets'],
    queryFn: () => base44.entities.Bouquet.list(),
    initialData: [],
  });

  const updateStatusMutation = useMutation({
    mutationFn: async ({ orderId, status, previousStatus }) => {
      // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const allOrders = await base44.entities.Order.list();
      const order = allOrders.find(o => o.id === orderId);
      
      if (!order || !order.created_by) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –∏–ª–∏ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
      }
      
      // –ï—Å–ª–∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—Ç–º–µ–Ω–µ–Ω", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
      if (status === '–æ—Ç–º–µ–Ω–µ–Ω' && previousStatus !== '–æ—Ç–º–µ–Ω–µ–Ω') {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—É–∫–µ—Ç—ã –∏ —Ü–≤–µ—Ç—ã
        if (order.items && order.items.length > 0) {
          const allBouquets = await base44.entities.Bouquet.list();
          const allFlowers = await base44.entities.Flower.list();

          for (const item of order.items) {
            if (item.type === 'bouquet' && item.item_id) {
              const bouquet = allBouquets.find(b => b.id === item.item_id);
              if (bouquet) {
                await base44.entities.Bouquet.update(bouquet.id, {
                  stock_quantity: (bouquet.stock_quantity || 0) + item.quantity
                });
              }
            } else if (item.type === 'flower' && item.item_id) {
              const flower = allFlowers.find(f => f.id === item.item_id);
              if (flower) {
                await base44.entities.Flower.update(flower.id, {
                  stock_quantity: (flower.stock_quantity || 0) + item.quantity
                });
              }
            }
          }
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç—ã –∏–∑ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤
        if (order.custom_bouquet && order.custom_bouquet.length > 0) {
          const allFlowers = await base44.entities.Flower.list();
          for (const flower of order.custom_bouquet) {
            const flowerEntity = allFlowers.find(f => f.id === flower.flower_id);
            if (flowerEntity) {
              await base44.entities.Flower.update(flowerEntity.id, {
                stock_quantity: (flowerEntity.stock_quantity || 0) + flower.quantity
              });
            }
          }
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      await base44.entities.Order.update(orderId, { status });
      
      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const statusMessages = {
        '–Ω–æ–≤—ã–π': { title: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω', message: '–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏' },
        '–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ': { title: '–ó–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ', message: '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É' },
        '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è': { title: '–ó–∞–∫–∞–∑ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è', message: '–§–ª–æ—Ä–∏—Å—Ç—ã –Ω–∞—á–∞–ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –≤–∞—à –±—É–∫–µ—Ç' },
        '–≤_–ø—É—Ç–∏': { title: '–ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏', message: '–ö—É—Ä—å–µ—Ä –≤—ã–µ—Ö–∞–ª –∫ –≤–∞–º. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏' },
        '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω': { title: '–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω', message: '–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤!' },
        '–≥–æ—Ç–æ–≤_–∫_–≤—ã–¥–∞—á–µ': { title: '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤', message: '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ. –ñ–¥–µ–º –≤–∞—Å –≤ –º–∞–≥–∞–∑–∏–Ω–µ!' },
        '–≤—ã–¥–∞–Ω': { title: '–ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω', message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤!' },
        '–æ—Ç–º–µ–Ω–µ–Ω': { title: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', message: '–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –¢–æ–≤–∞—Ä—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥.' }
      };
      
      const statusInfo = statusMessages[status] || { title: '–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω', message: `–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${status}` };
      
      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ
      await base44.entities.Notification.create({
        user_email: order.created_by,
        order_id: orderId,
        title: statusInfo.title,
        message: `${statusInfo.message}. –ó–∞–∫–∞–∑ #${orderId.slice(0, 8)}`,
        type: 'order_status',
        order_status: status,
        is_read: false
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      try {
        await base44.integrations.Core.SendEmail({
          to: order.created_by,
          subject: `FlowerDream: ${statusInfo.title}`,
          body: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <div style="background: linear-gradient(to right, #ec4899, #a855f7); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
                <h1 style="color: white; margin: 0;">FlowerDream</h1>
                <p style="color: white; margin: 10px 0 0 0;">–¶–≤–µ—Ç—ã —Å –ª—é–±–æ–≤—å—é</p>
              </div>
              <div style="background: #ffffff; padding: 30px; border: 1px solid #e5e7eb; border-top: none; border-radius: 0 0 10px 10px;">
                <h2 style="color: #1f2937; margin-top: 0;">${statusInfo.title}</h2>
                <p style="color: #4b5563; font-size: 16px; line-height: 1.6;">
                  ${statusInfo.message}
                </p>
                <div style="background: #fce7f3; padding: 15px; border-radius: 8px; margin: 20px 0;">
                  <p style="margin: 0; color: #831843;"><strong>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</strong> #${orderId.slice(0, 8)}</p>
                  <p style="margin: 10px 0 0 0; color: #831843;"><strong>–°—Ç–∞—Ç—É—Å:</strong> ${getStatusText(status)}</p>
                  <p style="margin: 10px 0 0 0; color: #831843;"><strong>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</strong> ${order.created_by}</p>
                </div>
                ${status === '–≤_–ø—É—Ç–∏' ? `
                  <div style="background: #dbeafe; padding: 15px; border-radius: 8px; margin: 20px 0;">
                    <p style="margin: 0; color: #1e40af;">üìû –ö—É—Ä—å–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥ —Ä—É–∫–æ–π.</p>
                  </div>
                ` : ''}
                ${(status === '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' || status === '–≤—ã–¥–∞–Ω') ? `
                  <div style="background: #d1fae5; padding: 15px; border-radius: 8px; margin: 20px 0;">
                    <p style="margin: 0; color: #065f46;">‚≠ê –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!</p>
                  </div>
                ` : ''}
                ${status === '–æ—Ç–º–µ–Ω–µ–Ω' ? `
                  <div style="background: #fee2e2; padding: 15px; border-radius: 8px; margin: 20px 0;">
                    <p style="margin: 0; color: #991b1b;">‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.</p>
                  </div>
                ` : ''}
                <p style="color: #6b7280; font-size: 14px; margin-top: 30px;">
                  –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
                  –ö–æ–º–∞–Ω–¥–∞ FlowerDream
                </p>
              </div>
            </div>
          `
        });
      } catch (emailError) {
        console.error('Failed to send email:', emailError);
      }
      
      return { orderId, status, recipientEmail: order.created_by };
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['admin-orders'] });
      queryClient.invalidateQueries({ queryKey: ['notifications'] });
      queryClient.invalidateQueries({ queryKey: ['unread-notifications-count'] });
      queryClient.invalidateQueries({ queryKey: ['admin-bouquets'] });
      queryClient.invalidateQueries({ queryKey: ['admin-flowers'] });
      toast({
        title: "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω",
        description: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${data.recipientEmail}`,
        duration: 2000,
      });
    },
    onError: (error) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
        variant: "destructive",
        duration: 3000,
      });
    },
  });

  const handleStatusChange = (orderId, newStatus) => {
    const order = orders.find(o => o.id === orderId);
    const previousStatus = order?.status;
    updateStatusMutation.mutate({ orderId, status: newStatus, previousStatus });
  };

  const getBouquetComposition = (bouquetId) => {
    const bouquet = bouquets.find(b => b.id === bouquetId);
    return bouquet?.composition || [];
  };

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å—Ç–∞—Ç—É—Å–æ–≤
  const statusPriority = {
    '–Ω–æ–≤—ã–π': 1,
    '–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ': 2,
    '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è': 3,
    '–≤_–ø—É—Ç–∏': 4,
    '–≥–æ—Ç–æ–≤_–∫_–≤—ã–¥–∞—á–µ': 5,
    '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω': 6,  // –û–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å "–≤—ã–¥–∞–Ω"
    '–≤—ã–¥–∞–Ω': 6,      // –û–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
    '–æ—Ç–º–µ–Ω–µ–Ω': 7
  };

  const sortedOrders = [...orders].sort((a, b) => {
    const priorityA = statusPriority[a.status] || 999;
    const priorityB = statusPriority[b.status] || 999;
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å—Ç–∞—Ç—É—Å–æ–≤
    if (priorityA !== priorityB) {
      return priorityA - priorityB;
    }
    
    // –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–∞–≤–Ω—ã - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    return new Date(b.created_date) - new Date(a.created_date);
  });

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const filteredOrders = statusFilter === "–≤—Å–µ" 
    ? sortedOrders 
    : sortedOrders.filter(order => order.status === statusFilter);

  // –ü–æ–¥—Å—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  const getOrderCountByStatus = (status) => {
    return orders.filter(order => order.status === status).length;
  };

  const statusFilters = [
    { value: "–≤—Å–µ", label: "–í—Å–µ", count: orders.length, color: "bg-gray-100 text-gray-800 hover:bg-gray-200" },
    { value: "–Ω–æ–≤—ã–π", label: "–ù–æ–≤—ã–µ", count: getOrderCountByStatus("–Ω–æ–≤—ã–π"), color: "bg-blue-100 text-blue-800 hover:bg-blue-200" },
    { value: "–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ", label: "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", count: getOrderCountByStatus("–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ"), color: "bg-yellow-100 text-yellow-800 hover:bg-yellow-200" },
    { value: "—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è", label: "–°–æ–±–∏—Ä–∞–µ—Ç—Å—è", count: getOrderCountByStatus("—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è"), color: "bg-purple-100 text-purple-800 hover:bg-purple-200" },
    { value: "–≤_–ø—É—Ç–∏", label: "–í –ø—É—Ç–∏", count: getOrderCountByStatus("–≤_–ø—É—Ç–∏"), color: "bg-indigo-100 text-indigo-800 hover:bg-indigo-200" },
    { value: "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω", label: "–î–æ—Å—Ç–∞–≤–ª–µ–Ω", count: getOrderCountByStatus("–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"), color: "bg-green-100 text-green-800 hover:bg-green-200" },
    { value: "–≥–æ—Ç–æ–≤_–∫_–≤—ã–¥–∞—á–µ", label: "–ì–æ—Ç–æ–≤", count: getOrderCountByStatus("–≥–æ—Ç–æ–≤_–∫_–≤—ã–¥–∞—á–µ"), color: "bg-teal-100 text-teal-800 hover:bg-teal-200" },
    { value: "–≤—ã–¥–∞–Ω", label: "–í—ã–¥–∞–Ω", count: getOrderCountByStatus("–≤—ã–¥–∞–Ω"), color: "bg-emerald-100 text-emerald-800 hover:bg-emerald-200" },
    { value: "–æ—Ç–º–µ–Ω–µ–Ω", label: "–û—Ç–º–µ–Ω–µ–Ω", count: getOrderCountByStatus("–æ—Ç–º–µ–Ω–µ–Ω"), color: "bg-red-100 text-red-800 hover:bg-red-200" },
  ];

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
  const getAvailableStatuses = (deliveryType) => {
    const commonStatuses = [
      { value: "–Ω–æ–≤—ã–π", label: "–ù–æ–≤—ã–π", icon: ShoppingBag },
      { value: "–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ", label: "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", icon: Clock },
      { value: "—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è", label: "–°–æ–±–∏—Ä–∞–µ—Ç—Å—è", icon: Sparkles },
      { value: "–æ—Ç–º–µ–Ω–µ–Ω", label: "–û—Ç–º–µ–Ω–µ–Ω", icon: XCircle }
    ];

    if (deliveryType === "–¥–æ—Å—Ç–∞–≤–∫–∞") {
      return [
        ...commonStatuses,
        { value: "–≤_–ø—É—Ç–∏", label: "–í –ø—É—Ç–∏", icon: Truck },
        { value: "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω", label: "–î–æ—Å—Ç–∞–≤–ª–µ–Ω", icon: CheckCircle }
      ];
    } else { // —Å–∞–º–æ–≤—ã–≤–æ–∑
      return [
        ...commonStatuses,
        { value: "–≥–æ—Ç–æ–≤_–∫_–≤—ã–¥–∞—á–µ", label: "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ", icon: Package },
        { value: "–≤—ã–¥–∞–Ω", label: "–í—ã–¥–∞–Ω", icon: CheckCircle }
      ];
    }
  };

  const getQuickActions = (currentStatus, deliveryType) => {
    const deliveryFlow = {
      '–Ω–æ–≤—ã–π': [
        { status: '–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ', label: '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å', icon: Clock },
        { status: '–æ—Ç–º–µ–Ω–µ–Ω', label: '–û—Ç–º–µ–Ω–∏—Ç—å', icon: XCircle }
      ],
      '–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ': [
        { status: '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è', label: '–°–æ–±—Ä–∞—Ç—å', icon: Sparkles },
        { status: '–æ—Ç–º–µ–Ω–µ–Ω', label: '–û—Ç–º–µ–Ω–∏—Ç—å', icon: XCircle }
      ],
      '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è': [
        { status: '–≤_–ø—É—Ç–∏', label: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', icon: Truck }
      ],
      '–≤_–ø—É—Ç–∏': [
        { status: '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω', label: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', icon: CheckCircle }
      ],
      '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω': [],
      '–æ—Ç–º–µ–Ω–µ–Ω': []
    };

    const pickupFlow = {
      '–Ω–æ–≤—ã–π': [
        { status: '–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ', label: '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å', icon: Clock },
        { status: '–æ—Ç–º–µ–Ω–µ–Ω', label: '–û—Ç–º–µ–Ω–∏—Ç—å', icon: XCircle }
      ],
      '–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ': [
        { status: '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è', label: '–°–æ–±—Ä–∞—Ç—å', icon: Sparkles },
        { status: '–æ—Ç–º–µ–Ω–µ–Ω', label: '–û—Ç–º–µ–Ω–∏—Ç—å', icon: XCircle }
      ],
      '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è': [
        { status: '–≥–æ—Ç–æ–≤_–∫_–≤—ã–¥–∞—á–µ', label: '–ö –≤—ã–¥–∞—á–µ', icon: Package }
      ],
      '–≥–æ—Ç–æ–≤_–∫_–≤—ã–¥–∞—á–µ': [
        { status: '–≤—ã–¥–∞–Ω', label: '–í—ã–¥–∞–Ω–æ', icon: CheckCircle }
      ],
      '–≤—ã–¥–∞–Ω': [],
      '–æ—Ç–º–µ–Ω–µ–Ω': []
    };
    
    const flow = deliveryType === '–¥–æ—Å—Ç–∞–≤–∫–∞' ? deliveryFlow : pickupFlow;
    return flow[currentStatus] || [];
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-12">
        <p className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä */}
      <div className="bg-white rounded-2xl shadow-md p-4">
        <div className="flex items-center gap-2 mb-3">
          <List className="w-4 h-4 text-pink-600" />
          <h3 className="font-bold text-gray-900 text-sm">–§–∏–ª—å—Ç—Ä</h3>
        </div>
        <div className="flex flex-wrap gap-2">
          {statusFilters.map((filter) => {
            const isActive = statusFilter === filter.value;
            
            return (
              <button
                key={filter.value}
                onClick={() => setStatusFilter(filter.value)}
                className={`px-3 py-1.5 rounded-lg text-xs font-medium transition-all flex items-center gap-1.5 ${
                  isActive 
                    ? 'ring-2 ring-pink-400 shadow-md' 
                    : 'hover:scale-105'
                } ${filter.color}`}
              >
                <span>{filter.label}</span>
                <Badge className="bg-white/80 text-gray-900 px-1.5 py-0 text-[10px] min-w-[20px] justify-center">
                  {filter.count}
                </Badge>
              </button>
            );
          })}
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ */}
      <div className="space-y-4">
        {filteredOrders.length === 0 ? (
          <div className="bg-white rounded-3xl shadow-lg p-8 text-center">
            <Package className="w-16 h-16 text-pink-300 mx-auto mb-4" />
            <p className="text-gray-500 text-lg">
              {statusFilter === "–≤—Å–µ" 
                ? "–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç" 
                : `–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${statusFilters.find(f => f.value === statusFilter)?.label}"`
              }
            </p>
          </div>
        ) : (
          filteredOrders.map((order) => {
            const availableStatuses = getAvailableStatuses(order.delivery_type);
            
            return (
              <motion.div
                key={order.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="bg-white rounded-3xl shadow-lg p-6 hover:shadow-xl transition-shadow"
              >
                <div className="flex flex-col lg:flex-row justify-between gap-6">
                  <div className="flex-1 space-y-4">
                    <div className="flex items-center justify-between flex-wrap gap-3">
                      <div className="flex items-center gap-3 flex-wrap">
                        <h3 className="text-xl font-bold text-gray-900">–ó–∞–∫–∞–∑ #{order.id.slice(0, 8)}</h3>
                        <Badge className={getStatusColor(order.status)}>
                          <span className="flex items-center gap-1.5">
                            {getStatusIcon(order.status)}
                            {getStatusText(order.status)}
                          </span>
                        </Badge>
                        <Badge className={order.delivery_type === "–¥–æ—Å—Ç–∞–≤–∫–∞" ? "bg-indigo-100 text-indigo-800" : "bg-purple-100 text-purple-800"}>
                          <span className="flex items-center gap-1.5">
                            {order.delivery_type === "–¥–æ—Å—Ç–∞–≤–∫–∞" ? <Truck className="w-3 h-3" /> : <Store className="w-3 h-3" />}
                            {order.delivery_type}
                          </span>
                        </Badge>
                      </div>
                      <p className="text-2xl font-bold bg-gradient-to-r from-pink-600 to-purple-600 bg-clip-text text-transparent">
                        {order.total_amount} ‚ÇΩ
                      </p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="flex items-center gap-2 text-gray-700">
                        <Clock className="w-4 h-4 text-pink-500" />
                        <span className="text-sm">
                          –°–æ–∑–¥–∞–Ω: {format(new Date(order.created_date), 'dd MMMM yyyy, HH:mm', { locale: ru })}
                        </span>
                      </div>
                      {order.recipient_name && (
                        <div className="flex items-center gap-2 text-gray-700">
                          <User className="w-4 h-4 text-pink-500" />
                          <span className="text-sm">{order.recipient_name}</span>
                        </div>
                      )}
                      {order.recipient_phone && (
                        <div className="flex items-center gap-2 text-gray-700">
                          <Phone className="w-4 h-4 text-pink-500" />
                          <span className="text-sm">{order.recipient_phone}</span>
                        </div>
                      )}
                      {order.delivery_address && (
                        <div className="flex items-center gap-2 text-gray-700">
                          <MapPin className="w-4 h-4 text-pink-500" />
                          <span className="text-sm">{order.delivery_address}</span>
                        </div>
                      )}
                      {order.delivery_date && (
                        <div className="flex items-center gap-2 text-gray-700">
                          <Calendar className="w-4 h-4 text-pink-500" />
                          <span className="text-sm">
                            {order.delivery_type === '—Å–∞–º–æ–≤—ã–≤–æ–∑' ? '–°–∞–º–æ–≤—ã–≤–æ–∑' : '–î–æ—Å—Ç–∞–≤–∫–∞'}: {format(new Date(order.delivery_date), 'dd MMMM yyyy', { locale: ru })}
                            {order.delivery_time && `, ${order.delivery_time}`}
                          </span>
                        </div>
                      )}
                    </div>

                    {/* –û—Ü–µ–Ω–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ */}
                    {order.rating_product && (
                      <div className="p-4 bg-gradient-to-r from-amber-50 to-yellow-50 border-2 border-amber-200 rounded-2xl">
                        <div className="flex items-center gap-2 mb-3">
                          <Star className="w-5 h-5 text-amber-500 fill-amber-500" />
                          <p className="font-bold text-amber-900">–û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞</p>
                        </div>
                        <div className="space-y-2">
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-medium text-gray-700">–ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</span>
                            <div className="flex gap-1">
                              {[...Array(5)].map((_, i) => (
                                <Star
                                  key={i}
                                  className={`w-4 h-4 ${
                                    i < order.rating_product ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'
                                  }`}
                                />
                              ))}
                              <span className="ml-2 text-sm font-bold text-gray-900">{order.rating_product}/5</span>
                            </div>
                          </div>
                          {order.delivery_type === '–¥–æ—Å—Ç–∞–≤–∫–∞' && (
                            <div className="flex items-center justify-between">
                              <span className="text-sm font-medium text-gray-700">–ö–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–∫–∏:</span>
                              <div className="flex gap-1">
                                {[...Array(5)].map((_, i) => (
                                  <Star
                                    key={i}
                                    className={`w-4 h-4 ${
                                      i < order.rating_delivery ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'
                                    }`}
                                  />
                                ))}
                                <span className="ml-2 text-sm font-bold text-gray-900">{order.rating_delivery}/5</span>
                              </div>
                            </div>
                          )}
                          {order.review_comment && (
                            <div className="mt-3 pt-3 border-t border-amber-200">
                              <p className="text-sm font-medium text-gray-700 mb-1">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</p>
                              <p className="text-sm text-gray-600 italic">"{order.review_comment}"</p>
                            </div>
                          )}
                          {order.review_date && (
                            <p className="text-xs text-gray-500 mt-2">
                              –û—Å—Ç–∞–≤–ª–µ–Ω: {format(new Date(order.review_date), 'dd MMMM yyyy, HH:mm', { locale: ru })}
                            </p>
                          )}
                        </div>
                      </div>
                    )}

                    {/* –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ */}
                    {((order.items && order.items.length > 0) || (order.custom_bouquet && order.custom_bouquet.length > 0)) && (
                      <div>
                        <p className="font-medium text-gray-900 mb-3 text-sm uppercase tracking-wider">–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</p>
                        <div className="space-y-3">
                          {/* –û–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–∏—Å–∫–ª—é—á–∞–µ–º custom, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ) */}
                          {order.items && order.items.filter(item => item.type !== 'custom').length > 0 && order.items.filter(item => item.type !== 'custom').map((item, idx) => {
                            const composition = item.type === 'bouquet' && item.item_id 
                              ? getBouquetComposition(item.item_id) 
                              : [];
                            
                            return (
                              <div key={idx} className="border border-gray-200 rounded-xl overflow-hidden bg-white shadow-sm">
                                <div className="px-3 sm:px-4 py-3 bg-gradient-to-r from-pink-50 to-purple-50 border-b border-gray-200">
                                  <div className="flex justify-between items-start gap-3">
                                    <div className="flex-1 min-w-0">
                                      <div className="flex items-center gap-2 mb-1 flex-wrap">
                                        <p className="text-sm sm:text-base font-bold text-gray-900">{item.name}</p>
                                        <Badge className="text-[10px] bg-purple-100 text-purple-800">
                                          {item.type === 'bouquet' ? 'üåπ –ë—É–∫–µ—Ç' : 'üå∏ –¶–≤–µ—Ç–æ–∫'}
                                        </Badge>
                                      </div>
                                      <p className="text-xs sm:text-sm text-gray-600">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity} —à—Ç</p>
                                    </div>
                                    <div className="text-right flex-shrink-0">
                                      <p className="text-sm sm:text-base font-bold text-pink-600">{item.quantity} √ó {item.price} ‚ÇΩ</p>
                                      <p className="text-xs sm:text-sm text-gray-500">{(item.quantity * item.price).toFixed(0)} ‚ÇΩ</p>
                                    </div>
                                  </div>
                                </div>
                                
                                {composition.length > 0 && (
                                  <div className="px-3 sm:px-4 py-3 bg-gradient-to-r from-purple-50 to-pink-50">
                                    <p className="text-xs font-semibold text-purple-900 mb-2 flex items-center gap-1">
                                      <Sparkles className="w-3.5 h-3.5" />
                                      –°–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–∞:
                                    </p>
                                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-1.5">
                                      {composition.map((flower, fIdx) => (
                                        <div key={fIdx} className="flex items-center justify-between text-xs text-purple-800 bg-white/60 rounded-lg px-2 py-1">
                                          <span className="font-medium">‚Ä¢ {flower.flower_name}</span>
                                          <span className="text-purple-600 font-semibold">{flower.quantity} —à—Ç</span>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                )}
                              </div>
                            );
                          })}

                          {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π –±—É–∫–µ—Ç */}
                          {order.custom_bouquet && order.custom_bouquet.length > 0 && (
                            <div className="border border-gray-200 rounded-xl overflow-hidden bg-white shadow-sm">
                              <div className="px-3 sm:px-4 py-3 bg-gradient-to-r from-pink-50 to-purple-50 border-b border-gray-200">
                                <div className="flex justify-between items-start gap-3">
                                  <div className="flex-1 min-w-0">
                                    <div className="flex items-center gap-2 mb-1 flex-wrap">
                                      <p className="text-sm sm:text-base font-bold text-gray-900">–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±—É–∫–µ—Ç</p>
                                      <Badge className="text-[10px] bg-purple-100 text-purple-800">
                                        ‚ú® –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π
                                      </Badge>
                                    </div>
                                    <p className="text-xs sm:text-sm text-gray-600">
                                      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.custom_bouquet.reduce((sum, f) => sum + f.quantity, 0)} —à—Ç
                                    </p>
                                  </div>
                                  <div className="text-right flex-shrink-0">
                                    <p className="text-sm sm:text-base font-bold text-pink-600">
                                      {order.custom_bouquet.reduce((sum, f) => sum + (f.price * f.quantity), 0).toFixed(0)} ‚ÇΩ
                                    </p>
                                  </div>
                                </div>
                              </div>
                              
                              <div className="px-3 sm:px-4 py-3 bg-gradient-to-r from-purple-50 to-pink-50">
                                <p className="text-xs font-semibold text-purple-900 mb-2 flex items-center gap-1">
                                  <Sparkles className="w-3.5 h-3.5" />
                                  –°–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–∞:
                                </p>
                                <div className="grid grid-cols-1 sm:grid-cols-2 gap-1.5">
                                  {order.custom_bouquet.map((flower, idx) => (
                                    <div key={idx} className="flex items-center justify-between text-xs text-purple-800 bg-white/60 rounded-lg px-2 py-1">
                                      <span className="font-medium">‚Ä¢ {flower.flower_name}</span>
                                      <span className="text-purple-600 font-semibold">{flower.quantity} —à—Ç</span>
                                    </div>
                                  ))}
                                </div>
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    )}

                    {order.card_message && (
                      <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl p-4">
                        <p className="font-medium text-gray-900 mb-1">–¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏:</p>
                        <p className="text-sm text-gray-700 italic">{order.card_message}</p>
                      </div>
                    )}
                  </div>

                  <div className="lg:w-64 space-y-3">
                    <label className="text-sm font-medium text-gray-700 mb-2 block">–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å</label>
                    <Select value={order.status} onValueChange={(value) => handleStatusChange(order.id, value)}>
                      <SelectTrigger className="w-full">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {availableStatuses.map((status) => (
                          <SelectItem key={status.value} value={status.value}>
                            <div className="flex items-center gap-2">
                              <status.icon className={`w-4 h-4 ${getStatusIconColor(status.value)}`} />
                              <span>{status.label}</span>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>

                    {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
                    <div className="bg-gradient-to-br from-gray-50 to-gray-100 rounded-2xl p-3">
                      <p className="text-xs font-medium text-gray-600 mb-2">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</p>
                      <div className="grid grid-cols-2 gap-2">
                        {getQuickActions(order.status, order.delivery_type).map((action) => (
                          <Button
                            key={action.status}
                            variant="outline"
                            size="sm"
                            onClick={() => handleStatusChange(order.id, action.status)}
                            className="text-xs"
                          >
                            <action.icon className="w-3 h-3 mr-1" />
                            {action.label}
                          </Button>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>
            );
          })
        )}
      </div>
    </div>
  );
}

function getStatusColor(status) {
  const colors = {
    '–Ω–æ–≤—ã–π': 'bg-blue-100 text-blue-800 border-blue-200',
    '–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ': 'bg-yellow-100 text-yellow-800 border-yellow-200',
    '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è': 'bg-purple-100 text-purple-800 border-purple-200',
    '–≤_–ø—É—Ç–∏': 'bg-indigo-100 text-indigo-800 border-indigo-200',
    '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω': 'bg-green-100 text-green-800 border-green-200',
    '–≥–æ—Ç–æ–≤_–∫_–≤—ã–¥–∞—á–µ': 'bg-teal-100 text-teal-800 border-teal-200',
    '–≤—ã–¥–∞–Ω': 'bg-emerald-100 text-emerald-800 border-emerald-200',
    '–æ—Ç–º–µ–Ω–µ–Ω': 'bg-red-100 text-red-800 border-red-200'
  };
  return colors[status] || 'bg-gray-100 text-gray-800 border-gray-200';
}

function getStatusIcon(status) {
  const icons = {
    '–Ω–æ–≤—ã–π': <ShoppingBag className="w-3.5 h-3.5" />,
    '–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ': <Clock className="w-3.5 h-3.5" />,
    '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è': <Sparkles className="w-3.5 h-3.5" />,
    '–≤_–ø—É—Ç–∏': <Truck className="w-3.5 h-3.5" />,
    '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω': <CheckCircle className="w-3.5 h-3.5" />,
    '–≥–æ—Ç–æ–≤_–∫_–≤—ã–¥–∞—á–µ': <Package className="w-3.5 h-3.5" />,
    '–≤—ã–¥–∞–Ω': <CheckCircle className="w-3.5 h-3.5" />,
    '–æ—Ç–º–µ–Ω–µ–Ω': <XCircle className="w-3.5 h-3.5" />
  };
  return icons[status] || <Package className="w-3.5 h-3.5" />;
}

function getStatusIconColor(status) {
  const colors = {
    '–Ω–æ–≤—ã–π': 'text-blue-500',
    '–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ': 'text-yellow-500',
    '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è': 'text-purple-500',
    '–≤_–ø—É—Ç–∏': 'text-indigo-500',
    '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω': 'text-green-500',
    '–≥–æ—Ç–æ–≤_–∫_–≤—ã–¥–∞—á–µ': 'text-teal-500',
    '–≤—ã–¥–∞–Ω': 'text-emerald-500',
    '–æ—Ç–º–µ–Ω–µ–Ω': 'text-red-500'
  };
  return colors[status] || 'text-gray-500';
}

function getStatusText(status) {
  const texts = {
    '–Ω–æ–≤—ã–π': '–ù–æ–≤—ã–π',
    '–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
    '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è': '–°–æ–±–∏—Ä–∞–µ—Ç—Å—è',
    '–≤_–ø—É—Ç–∏': '–í –ø—É—Ç–∏',
    '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
    '–≥–æ—Ç–æ–≤_–∫_–≤—ã–¥–∞—á–µ': '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
    '–≤—ã–¥–∞–Ω': '–í—ã–¥–∞–Ω',
    '–æ—Ç–º–µ–Ω–µ–Ω': '–û—Ç–º–µ–Ω–µ–Ω'
  };
  return texts[status] || status;
}
